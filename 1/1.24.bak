#lang racket

(define (timed-prime-test n)
  (start-prime-test n (runtime)))

(define (runtime) 
  (current-milliseconds))

(define (start-prime-test n start-time) 
  (if (prime? n) 
      (report-prime n (- (runtime) start-time)) 
      false))

(define (report-prime n elapsed-time)
  (display n)
  (display " *** ")
  (display elapsed-time)
  (newline))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (square n)
  (* n n))

(define (even? n)
  (= (remainder n 2) 0))

(define (search-for-primes n k)
  (cond ((> k 0) 
        (cond (not (divides? n 2)
               (if (timed-prime-test n)
               (search-for-primes (+ n 1) (- k 1))
               (search-for-primes (+ n 1) k)))
        (else (search-for-primes (+ n 1) k)))))) 


(search-for-primes 100000000000 3)
(newline)

(search-for-primes 1000000000000 3)
(newline)

(search-for-primes 10000000000000 3)
(newline)

(search-for-primes 100000000000000 3)